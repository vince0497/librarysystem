/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package librarysystem;

import java.awt.Color;
import java.awt.Cursor;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import javax.swing.ButtonGroup;
import javax.swing.JProgressBar;

/**
 *
 * @author Biben
 */


public class ReportManipulate extends javax.swing.JPanel {

    /**
     * Creates new form ReportManipulation
     */
    private ReportBookSide book;
    private ButtonGroup bgrp;
    private ReportProcess rep;
    private MySQLAPI api;
    private final static String MONTH = "Monthly";
    private final static String ANNUALL = "Annually";
   private final static String[]MONTHS ={"January","February","March","April","May","June","July","August","September","October","November","December"};
   
   public ReportManipulate(LibrarySystem m) {
      
        
        initComponents();
        this.api = new  MySQLAPI("jdbc:mysql://localhost:3306/db_library","root","");
        this.rep = new ReportProcess();
        bgrp = new ButtonGroup();
        bgrp.add(rdoMonthly);
        bgrp.add(rdoAnnual);
        
      cboYear.removeAllItems();
        for(int x=2015;x<2025;x++){
        cboYear.addItem(x+"");
        }
        //set section to combobo box
        ArrayList arr = api.getAllGradeSection();
        for(int x=0;x<arr.size();x++){
            String str = arr.get(x).toString();
            if (!((str.equals(Student.FACULTY))||(str.equals(Student.GRADUATED)))){
             cboSection.addItem(str);
            }
       
        }
        
        
        this.setList(ReportManipulate.MONTH);
        
        this.setSize(775, 331);
        this.setBackground(new Color(0,0,0,0));
    }
    
    public void setList(String ref){
    cboMonth.removeAllItems();
        if(ref.equals(ReportManipulate.MONTH)){
        
            for(int x=0;x<ReportManipulate.MONTHS.length;x++){
                this.cboMonth.addItem(ReportManipulate.MONTHS[x]);
                 }
            cboMonth.setEnabled(true);
        }else{
        cboMonth.setEnabled(false);
        
        }
        
    
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        rdoMonthly = new javax.swing.JRadioButton();
        rdoAnnual = new javax.swing.JRadioButton();
        cboMonth = new javax.swing.JComboBox();
        cboYear = new javax.swing.JComboBox();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        btnAddedBook = new javax.swing.JButton();
        btnUnreturned = new javax.swing.JButton();
        btnReportArchived = new javax.swing.JButton();
        btnPenalty = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        btnStud = new javax.swing.JButton();
        cboSection = new javax.swing.JComboBox();
        btnLoggedStudents = new javax.swing.JButton();
        btnListSection = new javax.swing.JButton();
        btnGraduated = new javax.swing.JButton();
        pnlLibrarian = new javax.swing.JPanel();
        btnLibrarianList = new javax.swing.JButton();
        btnBlockedLibrarian = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        btnListOfMaterials = new javax.swing.JButton();
        btnBorrowedMaterials = new javax.swing.JButton();
        btnPenaltyMat = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        btnFacultyList = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();

        setLayout(null);

        jPanel2.setBackground(new java.awt.Color(224, 236, 248));
        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 153), 1, true), "Date Setter", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 10), new java.awt.Color(0, 0, 153))); // NOI18N
        jPanel2.setLayout(null);

        rdoMonthly.setSelected(true);
        rdoMonthly.setText("Monthly");
        rdoMonthly.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                rdoMonthlyStateChanged(evt);
            }
        });
        rdoMonthly.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdoMonthlyActionPerformed(evt);
            }
        });
        jPanel2.add(rdoMonthly);
        rdoMonthly.setBounds(20, 20, 90, 25);

        rdoAnnual.setText("Annually");
        rdoAnnual.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdoAnnualActionPerformed(evt);
            }
        });
        jPanel2.add(rdoAnnual);
        rdoAnnual.setBounds(120, 20, 93, 25);

        jPanel2.add(cboMonth);
        cboMonth.setBounds(220, 20, 140, 30);

        cboYear.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jPanel2.add(cboYear);
        cboYear.setBounds(370, 20, 140, 30);

        add(jPanel2);
        jPanel2.setBounds(230, 10, 530, 70);

        jTabbedPane1.setBackground(new java.awt.Color(224, 236, 248));

        jPanel1.setBackground(new java.awt.Color(224, 236, 248));
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 153)), "Report For Books", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 10), new java.awt.Color(0, 0, 153))); // NOI18N
        jPanel1.setLayout(null);

        btnAddedBook.setText("Added Book");
        btnAddedBook.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddedBookActionPerformed(evt);
            }
        });
        jPanel1.add(btnAddedBook);
        btnAddedBook.setBounds(70, 30, 120, 25);

        btnUnreturned.setText("Overdue Books");
        btnUnreturned.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUnreturnedActionPerformed(evt);
            }
        });
        jPanel1.add(btnUnreturned);
        btnUnreturned.setBounds(300, 30, 150, 25);

        btnReportArchived.setText("Archived Books");
        btnReportArchived.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReportArchivedActionPerformed(evt);
            }
        });
        jPanel1.add(btnReportArchived);
        btnReportArchived.setBounds(70, 70, 120, 25);

        btnPenalty.setText("Penalties Collected");
        btnPenalty.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPenaltyActionPerformed(evt);
            }
        });
        jPanel1.add(btnPenalty);
        btnPenalty.setBounds(300, 70, 150, 25);

        jTabbedPane1.addTab("Books", jPanel1);

        jPanel3.setBackground(new java.awt.Color(224, 236, 248));
        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 153)), "Students", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 10), new java.awt.Color(0, 0, 153))); // NOI18N
        jPanel3.setLayout(null);

        btnStud.setText("View List");
        btnStud.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStudActionPerformed(evt);
            }
        });
        jPanel3.add(btnStud);
        btnStud.setBounds(210, 30, 90, 30);

        jPanel3.add(cboSection);
        cboSection.setBounds(30, 50, 170, 30);

        btnLoggedStudents.setText("Logged Students");
        btnLoggedStudents.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLoggedStudentsActionPerformed(evt);
            }
        });
        jPanel3.add(btnLoggedStudents);
        btnLoggedStudents.setBounds(340, 30, 130, 30);

        btnListSection.setText("List of Sections");
        btnListSection.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnListSectionActionPerformed(evt);
            }
        });
        jPanel3.add(btnListSection);
        btnListSection.setBounds(340, 80, 130, 30);

        btnGraduated.setText("Graduated");
        btnGraduated.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGraduatedActionPerformed(evt);
            }
        });
        jPanel3.add(btnGraduated);
        btnGraduated.setBounds(210, 80, 100, 30);

        jTabbedPane1.addTab("Students", jPanel3);

        pnlLibrarian.setBackground(new java.awt.Color(224, 236, 248));
        pnlLibrarian.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 153)), "Librarian", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 10), new java.awt.Color(0, 0, 153))); // NOI18N
        pnlLibrarian.setLayout(null);

        btnLibrarianList.setText("Librarian List");
        btnLibrarianList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLibrarianListActionPerformed(evt);
            }
        });
        pnlLibrarian.add(btnLibrarianList);
        btnLibrarianList.setBounds(40, 40, 120, 25);

        btnBlockedLibrarian.setText("Blocked Librarian");
        btnBlockedLibrarian.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBlockedLibrarianActionPerformed(evt);
            }
        });
        pnlLibrarian.add(btnBlockedLibrarian);
        btnBlockedLibrarian.setBounds(260, 40, 150, 25);

        jTabbedPane1.addTab("Librarians", pnlLibrarian);

        jPanel4.setBackground(new java.awt.Color(224, 236, 248));
        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 127)), "Materials", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 13), new java.awt.Color(0, 0, 127))); // NOI18N
        jPanel4.setLayout(null);

        btnListOfMaterials.setText("List Of Materials");
        btnListOfMaterials.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnListOfMaterialsActionPerformed(evt);
            }
        });
        jPanel4.add(btnListOfMaterials);
        btnListOfMaterials.setBounds(30, 30, 125, 25);

        btnBorrowedMaterials.setText("Overdue Materials");
        btnBorrowedMaterials.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBorrowedMaterialsActionPerformed(evt);
            }
        });
        jPanel4.add(btnBorrowedMaterials);
        btnBorrowedMaterials.setBounds(160, 30, 160, 25);

        btnPenaltyMat.setText("Penalties Collected");
        btnPenaltyMat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPenaltyMatActionPerformed(evt);
            }
        });
        jPanel4.add(btnPenaltyMat);
        btnPenaltyMat.setBounds(330, 30, 160, 25);

        jTabbedPane1.addTab("Materials", jPanel4);

        jPanel5.setBackground(new java.awt.Color(224, 236, 248));
        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 127)), "Faculty", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 13), new java.awt.Color(0, 0, 127))); // NOI18N
        jPanel5.setLayout(null);

        btnFacultyList.setText("List of Faculty");
        btnFacultyList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFacultyListActionPerformed(evt);
            }
        });
        jPanel5.add(btnFacultyList);
        btnFacultyList.setBounds(100, 40, 150, 25);

        jTabbedPane1.addTab("Faculty", jPanel5);

        add(jTabbedPane1);
        jTabbedPane1.setBounds(230, 90, 520, 170);

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/reportsBig.png"))); // NOI18N
        jLabel2.setText("jLabel2");
        add(jLabel2);
        jLabel2.setBounds(50, 70, 120, 120);

        jLabel1.setBackground(new Color(0,0,0,0));
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/addbookpanel.png"))); // NOI18N
        jLabel1.setText("jLabel1");
        add(jLabel1);
        jLabel1.setBounds(0, 0, 780, 330);
    }// </editor-fold>//GEN-END:initComponents

    private void rdoMonthlyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdoMonthlyActionPerformed
        // TODO add your handling code here:
        this.setList(ReportManipulate.MONTH);
        //System.out.println("asas");
    }//GEN-LAST:event_rdoMonthlyActionPerformed

    private void rdoMonthlyStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_rdoMonthlyStateChanged
        // TODO add your handling code here:
       // System.out.println("state");
    }//GEN-LAST:event_rdoMonthlyStateChanged

    private void rdoAnnualActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdoAnnualActionPerformed
        // TODO add your handling code here:
         this.setList(ReportManipulate.ANNUALL);
    }//GEN-LAST:event_rdoAnnualActionPerformed

    private void btnAddedBookActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddedBookActionPerformed
        // TODO add your handling code here:
        String alin="";
        Object lm = cboMonth.getSelectedItem();
        if(lm!=null){
        alin = lm.toString();
        }
        
        int pili = LibrarySystem.showConfirmation("Generate reports added books for "+alin+" "+cboYear.getSelectedItem(), "Reports", this);
               this.setCursor(new Cursor(Cursor.WAIT_CURSOR));
if(pili==0){

    
    
        if(rdoMonthly.isSelected()){
        int month=cboMonth.getSelectedIndex()+1;
        String mon = cboMonth.getSelectedItem().toString();
        String year=cboYear.getSelectedItem().toString();
        
        String que = "SELECT isbn, DATE_FORMAT(FROM_UNIXTIME(B.date_added/1000),'%d/%m/%Y %h:%i%p') as formatted_time ";
       que+= ",B.title,B.copy_number,CONCAT( L.f_name,' ',L.m_name,' ',L.l_name ) as fullname, ";
      que+= "CONCAT('Book added for the month of ','"+mon+" ','"+year+"') as report_when ,";
      
      que+="(SELECT CONCAT('Total books : ',COUNT(*)) FROM TblBook B1 WHERE  DATE_FORMAT(FROM_UNIXTIME(B.date_added/1000),'%m') = "+month+" AND   ";
      que+= "DATE_FORMAT(FROM_UNIXTIME(B.date_added/1000),'%Y') = "+year+" ) as bilang";
       que+= " FROM TblBook B,TblLibrarian L WHERE  L.librarian_id = B.added_by  AND ";
      que+= " DATE_FORMAT(FROM_UNIXTIME(B.date_added/1000),'%m') = "+month+" AND ";
      que+= "DATE_FORMAT(FROM_UNIXTIME(B.date_added/1000),'%Y') = "+year+" ";
      que+= "ORDER BY B.title ASC";
    //  rep.lud();
      this.rep.generateReport("AddedBook.jrxml", "AddedBook.pdf", que);
        
        
        }else{
             String year=cboYear.getSelectedItem().toString();
        
        String que = "SELECT isbn, DATE_FORMAT(FROM_UNIXTIME(B.date_added/1000),'%d/%m/%Y %h:%i%p') as formatted_time ";
       que+= ",B.title,B.copy_number,CONCAT( L.f_name,' ',L.m_name,' ',L.l_name ) as fullname, ";
            que+= "CONCAT('Annual report for adding books of year ','"+year+"') as report_when, ";
 que+="(SELECT CONCAT('Total books : ',COUNT(*)) FROM TblBook B1 WHERE ";
      que+= " DATE_FORMAT(FROM_UNIXTIME(B.date_added/1000),'%Y') = "+year+" ) as bilang";
       que+= " FROM TblBook B,TblLibrarian L WHERE  L.librarian_id = B.added_by  AND ";
     // que+= " DATE_FORMAT(FROM_UNIXTIME(B.date_added/1000),'%m') = "+month+" AND ";
      que+= "DATE_FORMAT(FROM_UNIXTIME(B.date_added/1000),'%Y') = "+year+" ";
      que+= "ORDER BY B.title ASC";
    //  rep.lud();
      this.rep.generateReport("AddedBook.jrxml", "AddedBook.pdf", que);
        
        
        
        }
    




}
     
        
      this.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
    }//GEN-LAST:event_btnAddedBookActionPerformed

    private void btnUnreturnedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUnreturnedActionPerformed
        // TODO add your handling code here:
         String alin="";
        Object lm = cboMonth.getSelectedItem();
        if(lm!=null){
        alin = lm.toString();
        }
        
        int pili = LibrarySystem.showConfirmation("Generate reports added books for "+alin+" "+cboYear.getSelectedItem(), "Reports", this);
               this.setCursor(new Cursor(Cursor.WAIT_CURSOR));
if(pili==0){

 this.setCursor(new Cursor(Cursor.WAIT_CURSOR));

        if(rdoMonthly.isSelected()){
        int month=cboMonth.getSelectedIndex()+1;
        String mon = cboMonth.getSelectedItem().toString();
        String year=cboYear.getSelectedItem().toString();
        String que = "SELECT DATE_FORMAT(FROM_UNIXTIME(BOR.date_borrowed/1000),'%d/%m/%Y %h:%i%p' ) as formatted_date,B.isbn,B.copy_number,B.title,CONCAT(S.f_name,' ',S.m_name,' ',S.l_name ) as borrower_name,  ";
      que +=  " CONCAT('=P= ',FLOOR((("+System.currentTimeMillis()+"-BOR.date_borrowed)/86400000))*"+api.getRatePerDay()+",'0') as penalty,CONCAT('Overdue borrowed book for the month ','"+mon+" ','"+year+"' )as report_detail ";
        que+= " FROM TblBorrowed BOR,TblStudent S,TblBook B WHERE ";
                que+=" S.stud_no = BOR.borrower AND ";
                que+=" B.book_id = BOR.book_id  AND (("+System.currentTimeMillis()+"-BOR.date_borrowed)/86400000)>=  "+api.getDayExpire()+" ";
                  que+= "AND   DATE_FORMAT(FROM_UNIXTIME(BOR.date_borrowed/1000),'%Y') = "+year+" ";
           que+= " AND DATE_FORMAT(FROM_UNIXTIME(BOR.date_borrowed/1000),'%m') = "+month+" ";

       this.rep.generateReport("OverdueBooks.jrxml", "OverdueBooks.pdf", que);
        
        
        }else{
            
             String year=cboYear.getSelectedItem().toString();
        String que = "SELECT DATE_FORMAT(FROM_UNIXTIME(BOR.date_borrowed/1000),'%d/%m/%Y %h:%i%p' ) as formatted_date,B.isbn,B.copy_number,B.title,CONCAT(S.f_name,' ',S.m_name,' ',S.l_name ) as borrower_name,  ";
        que +=  " CONCAT('=P= ',FLOOR((("+api.getMilliNow()+"-BOR.date_borrowed)/86400000))*"+api.getRatePerDay()+",'0') as penalty,CONCAT('Overdue borrowed book for the year ','"+year+"' )as report_detail  ";
        que+= " FROM TblBorrowed BOR,TblStudent S,TblBook B WHERE ";
                que+=" S.stud_no = BOR.borrower AND ";
                que+=" B.book_id = BOR.book_id  AND (("+System.currentTimeMillis()+"-BOR.date_borrowed)/86400000)>= "+api.getDayExpire()+" ";
                  que+= "AND   DATE_FORMAT(FROM_UNIXTIME(BOR.date_borrowed/1000),'%Y') = "+year+" ";
         //  que+= " AND DATE_FORMAT(FROM_UNIXTIME(BOR.date_borrowedqweqwe/1000),'%m') = "+month+" ";
System.out.println(que);
       this.rep.generateReport("OverdueBooks.jrxml", "OverdueBooks.pdf", que);
        
        
            
            
            // String year=cboYear.getSelectedItem().toString();
     
      //this.rep.generateReport("AddedBook.jrxml", "AddedBook.pdf", que);
        
        
        
        }














}//edn fo agre
              
     
        
      this.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
    }//GEN-LAST:event_btnUnreturnedActionPerformed

    private void btnStudActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStudActionPerformed
        // TODO add your handling code here:
        
       int pili = LibrarySystem.showConfirmation("Generate reports for "+this.cboSection.getSelectedItem()+" ", "Reports", this);
       if(pili==0){
     
         this.setCursor(new Cursor(Cursor.WAIT_CURSOR));
            String sect = this.cboSection.getSelectedItem().toString();
        String que = "SELECT S.stud_no, CONCAT(S.f_name,' ',S.m_name,' ',S.l_name) as fullname,";
        que+= "CONCAT(L.f_name,' ',L.m_name,' ',L.l_name)as added_name,S.status, S.grade_sec ";
        que+= " FROM TblStudent S,TblLibrarian L    WHERE  ";
        que+= " L.librarian_id = S.added_by AND S.grade_sec = '"+sect+"' ";
        this.rep.generateReport("StudentAdded.jrxml", "StudentAdded.pdf", que);
         this.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
        
       
       
       
       }
       
    }//GEN-LAST:event_btnStudActionPerformed

    private void btnLibrarianListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLibrarianListActionPerformed
        // TODO add your handling code here:
        int pili = LibrarySystem.showConfirmation("Generate list of Librarian?", "Reports", this);
      
        if(pili==0){
             this.setCursor(new Cursor(Cursor.WAIT_CURSOR));

            String que = "SELECT L.username, CONCAT(L.f_name,' ',L.m_name,' ',L.l_name) as fullname ";
        que+= ", DATE_FORMAT(FROM_UNIXTIME(L.date_hired/1000),'%d/%m/%Y %h:%i%p' ) as hired ";
                que+="FROM TblLibrarian L  ORDER BY L.date_hired ASC ";
                
                this.rep.generateReport("ListLibrarian.jrxml", "ListLibrarian.pdf", que);
  this.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
       }
                
    }//GEN-LAST:event_btnLibrarianListActionPerformed

    public int getMonthNumber(){
    int ret=0;
         ret= this.cboMonth.getSelectedIndex()+1;
        
    return ret;
    }
    
    public String getMonthWord(){
    String lm="";
    lm = this.cboMonth.getSelectedItem().toString();
    return lm;
    }
    
    public String getYearWord(){
    String lm="";
    lm = this.cboYear.getSelectedItem().toString();
    return lm;
    }
    
    private void btnReportArchivedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReportArchivedActionPerformed
        // TODO add your handling code here:
        Object obj = this.cboMonth.getSelectedItem();
        String month="";
        String year = this.cboYear.getSelectedItem().toString();
        int monthNum = this.cboMonth.getSelectedIndex()+1;
        if(obj!=null){
         month = this.cboMonth.getSelectedItem().toString();
        }
       int ch = LibrarySystem.showConfirmation("Generate archived book reports for "+month+" "+year, "Reports", this);
         
     
       if(ch==0){
             this.setCursor(new Cursor(Cursor.WAIT_CURSOR));
           if(this.rdoMonthly.isSelected()){
           
           
        String que = "SELECT B.isbn,B.copy_number,B.title,CONCAT(L.f_name,' ',L.m_name,' ',L.l_name) as fullname, ";
        que+= " DATE_FORMAT(FROM_UNIXTIME(A.date_archived/1000),'%d/%m/%Y %h:%i%p' ) as date_arch,  ";
        que+=" CONCAT('Archived books for the ','"+month+" ','"+year+"' ) as title_header ";
       
        que+= " FROM TblBook B,TblArchived A,TblLibrarian L ";
                que+= "  WHERE B.status = '"+Book.ARCHIVED+"'  AND ";
                que+= " B.book_id = A.book_id  AND L.librarian_id = A.archived_by AND  ";
                que+= "DATE_FORMAT(FROM_UNIXTIME(A.date_archived/1000),'%m') = "+monthNum+"  AND ";
                que+=" DATE_FORMAT(FROM_UNIXTIME(A.date_archived/1000),'%Y') = "+year+" ";
             //   System.out.println(quezxczxc);
                this.rep.generateReport("ArchivedBooks.jrxml", "ArchivedBooks.pdf", que);
           
           
           }else{
           
           
        String que = "SELECT B.isbn,B.copy_number,B.title,CONCAT(L.f_name,' ',L.m_name,' ',L.l_name) as fullname, ";
        que+= " DATE_FORMAT(FROM_UNIXTIME(A.date_archived/1000),'%d/%m/%Y %h:%i%p' ) as date_arch,  ";
        que+=" CONCAT('Archived books for ','"+month+" ','"+year+"' ) as title_header ";
       
        que+= " FROM TblBook B,TblArchived A,TblLibrarian L ";
                que+= "  WHERE B.status = '"+Book.ARCHIVED+"'  AND ";
                que+= " B.book_id = A.book_id  AND L.librarian_id = A.archived_by AND  ";
            //    que+= "DATE_FORMAT(FROM_UNIXTIME(A.date_archived/1000),'%m') = "+monthNum+"  AND ";
                que+=" DATE_FORMAT(FROM_UNIXTIME(A.date_archived/1000),'%Y') = "+year+" ";
             //   System.out.println(quezxczxc);
                this.rep.generateReport("ArchivedBooks.jrxml", "ArchivedBooks.pdf", que);
           
           
           
           }
       
            this.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));     
       
       
       
       
       
       
       
       }
       
    }//GEN-LAST:event_btnReportArchivedActionPerformed

    private void btnPenaltyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPenaltyActionPerformed
        // TODO add your handling code here:
        
           String mon="";
                   int monNum=0;
                   String year="";
           if(cboMonth.getSelectedItem()!=null){
           mon = this.getMonthWord();
         monNum = this.getMonthNumber();
        
           }
            year = this.getYearWord();
int ch = LibrarySystem.showConfirmation("Generate archived book reports for "+mon+" "+year, "Reports", this);

       if(ch==0){
                  this.setCursor(new Cursor(Cursor.WAIT_CURSOR));

        if(this.rdoMonthly.isSelected()){
        
       
        String que = "SELECT CONCAT(S.f_name,' ',S.m_name,' ',S.l_name)as stud_fullname, ";
        que+=" CONCAT(L.f_name,' ',L.m_name,' ',L.l_name)as lib_fullname, ";
        que+=" CONCAT('=P=',P.cost,'.00') as penalty,  ";
        que+= " DATE_FORMAT(FROM_UNIXTIME(P.date_collected/1000),'%d/%m/%Y %h:%i%p' ) as date_paid, ";
        que+=" CONCAT('Collected penalties for Month ','"+mon+"' ) as header_detail ";
        
        que+= " FROM TblPenaltyCollected P,TblStudent S,TblLibrarian L  WHERE ";
                que+=" P.stud_no = S.stud_no AND P.collect_by = L.librarian_id AND ";
           que+= "DATE_FORMAT(FROM_UNIXTIME(P.date_collected/1000),'%m') = "+monNum+"  AND ";
           que+= "DATE_FORMAT(FROM_UNIXTIME(P.date_collected/1000),'%Y') = "+year+"  ";
           // System.out.println(que);
                this.rep.generateReport("Penalties.jrxml", "Penalties.pdf", que);
        
        }else{
        
          String que = "SELECT CONCAT(S.f_name,' ',S.m_name,' ',S.l_name)as stud_fullname, ";
        que+=" CONCAT(L.f_name,' ',L.m_name,' ',L.l_name)as lib_fullname, ";
        que+=" CONCAT('=P=',P.cost,'.00') as penalty,  ";
        que+= " DATE_FORMAT(FROM_UNIXTIME(P.date_collected/1000),'%d/%m/%Y %h:%i%p' ) as date_paid, ";
        que+=" CONCAT('Collected penalties for Year ','"+year+"' ) as header_detail ";
        
        que+= " FROM TblPenaltyCollected P,TblStudent S,TblLibrarian L  WHERE ";
                que+=" P.stud_no = S.stud_no AND P.collect_by = L.librarian_id AND ";
         //  que+= "DATE_FORMAT(FROM_UNIXTIME(P.date_collected/1000),'%m') = "+monNum+"  AND ";
           que+= " DATE_FORMAT(FROM_UNIXTIME(P.date_collected/1000),'%Y') = "+year+"  ";
           // System.out.println(que);
                this.rep.generateReport("Penalties.jrxml", "Penalties.pdf", que);
        }
       
           this.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));    
       
       }//end of ch
       
        
       
       
       
        
    }//GEN-LAST:event_btnPenaltyActionPerformed

    private void btnBlockedLibrarianActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBlockedLibrarianActionPerformed
        // TODO add your handling code here:
       int ch = LibrarySystem.showConfirmation("Generate reports for blocked librarians?", "Blocked Librarian", this);
      
       if(ch==0){
         this.setCursor(new Cursor(Cursor.WAIT_CURSOR));
         String que="SELECT CONCAT(L.f_name,' ',L.m_name,' ',L.l_name) as fullname, L.username,";
   que+="DATE_FORMAT(FROM_UNIXTIME(L.date_hired/1000),'%d/%m/%Y %h:%i%p') as hire_date ";
 
        que+= " FROM TblLibrarian L WHERE L.attempts = 3 ";
           System.out.println(que);
       this.rep.generateReport("BlockedLibrarian.jrxml", "BlockedLibrarian.pdf", que);
         this.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
       }
     
        
    }//GEN-LAST:event_btnBlockedLibrarianActionPerformed

    private void btnLoggedStudentsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLoggedStudentsActionPerformed
        // TODO add your handling code here:
       String mon = "";
       String year = "";
       String que="";
        if(this.rdoMonthly.isSelected()){
        year = this.cboYear.getSelectedItem().toString();
        int mons = this.cboMonth.getSelectedIndex()+1;
          mon= this.cboMonth.getSelectedItem().toString();
         que += "SELECT CONCAT(S.f_name,' ',S.m_name,' ',S.l_name) as stud, ";
        que+=" CONCAT(L.f_name,' ',L.m_name,' ',L.l_name) as lib, ";
        que+="DATE_FORMAT(FROM_UNIXTIME(LO.date_logged/1000),'%d/%m/%Y %h:%i%p') as when_log, ";
        que+=" CONCAT('Logged students for ','"+mon+"',' "+year+"') as header_detail ";
        que+="FROM TblStudentLog LO, TblStudent S, TblLibrarian L  WHERE  ";
        que+=" LO.stud_no = S.stud_no AND LO.assess_by = L.librarian_id AND ";
        que+=" DATE_FORMAT(FROM_UNIXTIME(LO.date_logged/1000),'%m')="+mons+" AND ";
        que+=" DATE_FORMAT(FROM_UNIXTIME(LO.date_logged/1000),'%Y')="+year+" ";
        
        }else{
            year = this.cboYear.getSelectedItem().toString();
            
           que+= "SELECT CONCAT(S.f_name,' ',S.m_name,' ',S.l_name) as stud, ";
        que+=" CONCAT(L.f_name,' ',L.m_name,' ',L.l_name) as lib, ";
        que+="DATE_FORMAT(FROM_UNIXTIME(LO.date_logged/1000),'%d/%m/%Y %h:%i%p') as when_log, ";
        que+=" CONCAT('Logged students for ','"+year+"') as header_detail ";
        que+="FROM TblStudentLog LO, TblStudent S, TblLibrarian L  WHERE ";
        que+=" LO.stud_no = S.stud_no AND LO.assess_by = L.librarian_id AND ";
        que+=" DATE_FORMAT(FROM_UNIXTIME(LO.date_logged/1000),'%Y')="+year+" ";
        
        }
              int ch = LibrarySystem.showConfirmation("Generate report for logged students in "+mon+" "+year+"?", "Student Log", this);
                      

        if(ch==0){
            this.setCursor(new Cursor(Cursor.WAIT_CURSOR));
        System.out.println(que);
        this.rep.generateReport("LoggedStudent.jrxml", "LoggedStudent.pdf", que);
        this.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
        }
       
        
        //que+=" "
    }//GEN-LAST:event_btnLoggedStudentsActionPerformed

    private void btnListSectionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnListSectionActionPerformed
        // TODO add your handling code here:
       int ch= LibrarySystem.showConfirmation("Generate reports for list of sections?", "List of Sections", this);
      if(ch==0){
       this.setCursor(new Cursor(Cursor.WAIT_CURSOR));
       String que = "SELECT G.grade_sec, (SELECT COUNT(*) FROM TblStudent S WHERE S.grade_sec=G.grade_sec ) as occupy, "; 
        que+= "DATE_FORMAT(FROM_UNIXTIME(G.date_added/1000),'%d/%m/%Y %h:%i%p') as date_dagdag ";        
        que+= "FROM TblGradeSec G WHERE NOT(G.grade_sec  = '"+Student.GRADUATED+"' OR G.grade_sec   = '"+Student.FACULTY+"') ";
  this.rep.generateReport("ListSections.jrxml", "ListSections.pdf", que);
      this.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
      }
      
     
        
        
       // System.out.println(System.currentTimeMillis()-(ReturnBookConfirm.ONE_DAY_MILLI * 20));
    }//GEN-LAST:event_btnListSectionActionPerformed

    private void btnGraduatedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGraduatedActionPerformed
        // TODO add your handling code here:
      String taon=  cboYear.getSelectedItem().toString();
      int ch =  LibrarySystem.showConfirmation("Generate reports for graduated students\nFor the year "+taon+"?", "Graduated", this);
      
      if(ch==0){
          this.setCursor(new Cursor(Cursor.WAIT_CURSOR));
      String que="SELECT GR.stud_no,CONCAT(S.f_name,' ',S.m_name,' ',S.l_name) as fullname, ";
        que+="DATE_FORMAT(FROM_UNIXTIME(GR.date_graduated/1000),'%Y') as year_grad, ";
        que+="CONCAT('Graduated student for the year ',DATE_FORMAT(FROM_UNIXTIME(GR.date_graduated/1000),'%Y')) as title_header";
        que+=" FROM TblGraduated GR,TblStudent S WHERE GR.stud_no = S.stud_no AND DATE_FORMAT(FROM_UNIXTIME(GR.date_graduated/1000),'%Y')='"+taon+"' ";
          System.out.println(que);
        this.rep.generateReport("Graduated.jrxml", "Graduated.pdf", que);
      this.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
      }//end of ok siya
    }//GEN-LAST:event_btnGraduatedActionPerformed

    public void setMyCur(boolean buka){
    
        if(buka){
        this.setCursor(new Cursor(Cursor.WAIT_CURSOR));
        }else{
        this.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
        }
    }
    
    private void btnListOfMaterialsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnListOfMaterialsActionPerformed
        // TODO add your handling code here:
        String selYear = cboYear.getSelectedItem().toString();
       Object ob = cboMonth.getSelectedItem();
       String mon = " ";
       String sum = " ";
       if(ob!=null){
       mon += ob.toString();
       sum+=mon+" "+selYear;
       }else{
       sum +="Year "+selYear;
       }
    int pil =  LibrarySystem.showConfirmation("Generate report for"+sum, "Generate report", this);

       
        if(pil==0){
        if(this.rdoAnnual.isSelected()){
        //api.getPricePenalty(WIDTH, WIDTH)
          //  String selYear = cboYear.getSelectedItem().toString();
        String que = "SELECT M.material_id,M.material_name,"+api.convertDateFormat("M.date_added", api.FULL_DATE)+" as date_add, CONCAT(f_name,' ',m_name,' ',l_name) as add_by,  ";
        que+= " CONCAT('Added Materials for Year ','"+selYear+"') as subtitle ";
                que+= " FROM TblMaterial M, TblLibrarian L WHERE M.added_by = L.librarian_id AND "+api.convertDateFormat("M.date_added", api.YEAR)+" = "+selYear+" "; 
                System.out.println(que);
                this.setMyCur(true);
        this.rep.generateReport("ListOfMaterials.jrxml", "ListOfMaterials"+selYear+".pdf", que);
        this.setMyCur(false);
        }else{
        int mo = cboMonth.getSelectedIndex()+1;
            String que = "SELECT M.material_id,M.material_name,"+api.convertDateFormat("M.date_added", api.FULL_DATE)+" as date_add, CONCAT(f_name,' ',m_name,' ',l_name) as add_by,  ";
        que+= " CONCAT('Added Materials for Month ','"+mon+" "+selYear+"') as subtitle ";
                que+= " FROM TblMaterial M, TblLibrarian L WHERE M.added_by = L.librarian_id AND "+api.convertDateFormat("M.date_added", api.YEAR)+" = "+selYear+"  AND ";
                que+= " "+api.convertDateFormat("M.date_added", api.MONTH)+" = "+mo+" ";
             System.out.println(que);
                this.setMyCur(true);
        this.rep.generateReport("ListOfMaterials.jrxml", "ListOfMaterials"+mon+selYear+".pdf", que);
        this.setMyCur(false);
        
        
        }
        
        
        
        }
    }//GEN-LAST:event_btnListOfMaterialsActionPerformed

    private void btnBorrowedMaterialsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBorrowedMaterialsActionPerformed
        // TODO add your handling code here:
        
//        String que = "SELECT M.material_id,M.material_name,CONCAT(S.f_name,' ',S.m_name,' ',S.l_name) as  bor_fullname, CONCAT(L.f_name,' ',L.m_name,' ',L.l_name) as ass_fullname,";
//        que+= " "+api.convertDateFormat("BOR.date_borrowed", MySQLAPI.FULL_DATE)+"  as date_bor , as subtitle";
//      que+= "FROM TblBorrowedMaterial BOR,TblMaterial M,TblStudent S,TblLibrarian L  WHERE BOR.material_id = M.material_name AND BOR.borrowed_by = S.stud_no AND L.librarian_id = BOR.assess_by ";
        
        
             String selYear = cboYear.getSelectedItem().toString();
       Object ob = cboMonth.getSelectedItem();
       String mon = " ";
       String sum = " ";
       if(ob!=null){
       mon += ob.toString();
       sum+=mon+" "+selYear;
       }else{
       sum +="Year "+selYear;
       }
    int pil =  LibrarySystem.showConfirmation("Generate report for unreturned material for"+sum, "Generate report", this);

       
        if(pil==0){
        if(this.rdoAnnual.isSelected()){
            
                 
        String que = "SELECT M.material_id,M.material_name,CONCAT(S.f_name,' ',S.m_name,' ',S.l_name) as  bor_by, CONCAT(L.f_name,' ',L.m_name,' ',L.l_name) as ass_by,";
        que+= " "+api.convertDateFormat("BOR.date_borrowed", MySQLAPI.FULL_DATE)+"  as date_bor , CONCAT('Unreturned Materials of Year ','"+selYear+"') as subtitle";
      que+= "    FROM TblBorrowedMaterial BOR,TblMaterial M,TblStudent S,TblLibrarian L  WHERE BOR.material_id = M.material_id AND BOR.borrowed_by = S.stud_no AND L.librarian_id = BOR.assess_by ";
       que+= " AND "+api.convertDateFormat("BOR.date_borrowed", MySQLAPI.YEAR)+" = "+selYear+"  AND (("+api.getMilliNow()+"-BOR.date_borrowed)/"+MySQLAPI.ONE_DAY_MILLI+") >= "+api.getDayExpire()+" ";
            System.out.println(que);
                this.setMyCur(true);
        this.rep.generateReport("UnreturnedMaterial.jrxml", "UnreturnedMaterial"+selYear+".pdf", que);
        this.setMyCur(false);
        }else{
        int mo = cboMonth.getSelectedIndex()+1;
        
        
                    
        String que = "SELECT M.material_id,M.material_name,CONCAT(S.f_name,' ',S.m_name,' ',S.l_name) as  bor_by, CONCAT(L.f_name,' ',L.m_name,' ',L.l_name) as ass_by,";
        que+= " "+api.convertDateFormat("BOR.date_borrowed", MySQLAPI.FULL_DATE)+"  as date_bor , CONCAT('Unreturned Materials of Year ','"+selYear+"') as subtitle";
      que+= "    FROM TblBorrowedMaterial BOR,TblMaterial M,TblStudent S,TblLibrarian L  WHERE BOR.material_id = M.material_id AND BOR.borrowed_by = S.stud_no AND L.librarian_id = BOR.assess_by ";
      que+= " AND "+api.convertDateFormat("BOR.date_borrowed", MySQLAPI.MONTH)+" = "+mo+" ";
      que+= " AND "+api.convertDateFormat("BOR.date_borrowed", MySQLAPI.YEAR)+" = "+selYear+"  AND (("+api.getMilliNow()+"-BOR.date_borrowed)/"+MySQLAPI.ONE_DAY_MILLI+") >= "+api.getDayExpire()+" ";
            System.out.println(que);
     
                this.setMyCur(true);
        this.rep.generateReport("UnreturnedMaterial.jrxml", "UnreturnedMaterial"+mon+selYear+".pdf", que);
        this.setMyCur(false);
        
        
        }
        
        
        
        }
    }//GEN-LAST:event_btnBorrowedMaterialsActionPerformed

    private void btnPenaltyMatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPenaltyMatActionPerformed
        // TODO add your handling code here:
               String selYear = cboYear.getSelectedItem().toString();
       Object ob = cboMonth.getSelectedItem();
       String mon = " ";
       String sum = " ";
       if(ob!=null){
       mon += ob.toString();
       sum+=mon+" "+selYear;
       }else{
       sum +="Year "+selYear;
       }
    int pil =  LibrarySystem.showConfirmation("Generate report for penalties collected in material for"+sum, "Generate report", this);

       
        if(pil==0){
        if(this.rdoAnnual.isSelected()){
           
       String que = "SELECT CONCAT(S.stud_no,'-',S.f_name,' ',S.m_name,' ',S.l_name) as stud_fullname,CONCAT(L.f_name,' ',L.m_name,' ',L.l_name) as lib_fullname, ";
       que+= " CONCAT('=P= ',PEN.cost,'0') as penalty, "+api.convertDateFormat("PEN.date_collected", MySQLAPI.FULL_DATE)+" as date_paid, CONCAT('Collected Penalty for Material Year of ','"+selYear+"') as header_detail ";
               que+= " FROM TblPenaltyCollectedMaterial PEN , TblStudent S,TblLibrarian L  WHERE PEN.stud_no = S.stud_no AND PEN.collect_by = L.librarian_id ";
             que+= " AND "+api.convertDateFormat("PEN.date_collected", MySQLAPI.YEAR)+" = "+selYear+" ";    
            System.out.println(que);
                this.setMyCur(true);
        this.rep.generateReport("Penalties.jrxml", "CollectedPenaltyMaterials"+selYear+".pdf", que);
        this.setMyCur(false);
        }else{
        int mo = cboMonth.getSelectedIndex()+1;
                   
       String que = "SELECT CONCAT(S.stud_no,'-',S.f_name,' ',S.m_name,' ',S.l_name) as stud_fullname,CONCAT(L.f_name,' ',L.m_name,' ',L.l_name) as lib_fullname, ";
       que+= " CONCAT('=P= ',PEN.cost,'0') as penalty, "+api.convertDateFormat("PEN.date_collected", MySQLAPI.FULL_DATE)+" as date_paid, CONCAT('Collected Penalty for Material Month of',' "+mon+"',' "+selYear+"') as header_detail ";
               que+= " FROM TblPenaltyCollectedMaterial PEN , TblStudent S,TblLibrarian L  WHERE PEN.stud_no = S.stud_no AND PEN.collect_by = L.librarian_id ";
             que+= " AND "+api.convertDateFormat("PEN.date_collected", MySQLAPI.YEAR)+" = "+selYear+" AND "+api.convertDateFormat("PEN.date_collected", MySQLAPI.MONTH)+" = "+mo+" ";    
            System.out.println(que);
     
                this.setMyCur(true);
        this.rep.generateReport("Penalties.jrxml", "CollectedPenaltyMaterials"+mon+selYear+".pdf", que);
        this.setMyCur(false);
        
        
        }
        
        
        
        }
    }//GEN-LAST:event_btnPenaltyMatActionPerformed

    private void btnFacultyListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFacultyListActionPerformed
        // TODO add your handling code here:
        int pil = LibrarySystem.showConfirmation("Generate reports for list of faculty?", "List of Faculty", this);
       if(pil==0){
       
        String que = "SELECT S.stud_no,CONCAT(S.l_name,' ',S.f_name,' ',S.m_name) as fac_fullname, "+api.convertDateFormat("S.date_added", MySQLAPI.FULL_DATE)+" as add_date, ";
        que+= " CONCAT(L.f_name,' ',L.m_name,' ',L.l_name) as lib_fullname ";
        que+= " FROM TblStudent S, TblLibrarian L WHERE S.grade_sec = '"+Student.FACULTY+"' AND L.librarian_id = S.added_by ";
        que+=" ORDER BY fac_fullname ASC ";
           System.out.println(que);
           this.setMyCur(true);
        this.rep.generateReport("ListOfFaculty.jrxml", "FacultyList.pdf", que);
        this.setMyCur(false);
       }
        
    }//GEN-LAST:event_btnFacultyListActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddedBook;
    private javax.swing.JButton btnBlockedLibrarian;
    private javax.swing.JButton btnBorrowedMaterials;
    private javax.swing.JButton btnFacultyList;
    private javax.swing.JButton btnGraduated;
    private javax.swing.JButton btnLibrarianList;
    private javax.swing.JButton btnListOfMaterials;
    private javax.swing.JButton btnListSection;
    private javax.swing.JButton btnLoggedStudents;
    private javax.swing.JButton btnPenalty;
    private javax.swing.JButton btnPenaltyMat;
    private javax.swing.JButton btnReportArchived;
    private javax.swing.JButton btnStud;
    private javax.swing.JButton btnUnreturned;
    private javax.swing.JComboBox cboMonth;
    private javax.swing.JComboBox cboSection;
    private javax.swing.JComboBox cboYear;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JPanel pnlLibrarian;
    private javax.swing.JRadioButton rdoAnnual;
    private javax.swing.JRadioButton rdoMonthly;
    // End of variables declaration//GEN-END:variables
}
